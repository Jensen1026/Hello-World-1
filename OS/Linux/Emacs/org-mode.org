* Document Structure

** Headlines

   The headlines in Org start with one or more stars,on the left margin
   
** Visibility cycling

*** TAB

    Rotate current subtree among the states(-> FOLDED -> CHILDREN -> SUBTREE ->)
   
*** S-TAB and C-u TAB

    Rotate the entire buffer among the states(-> OVERVIEW -> CONTENTS -> SHOW ALL ->)
    
** Motion

*** C-c C-n

    Next heading
    
*** C-c C-p

    Previous heading
    
*** C-c C-f

    Next heading same level
    
*** C-c C-b

    Previous heading same level
      
*** C-c C-u

    Backward to higher level heading
   
** Structure editing

*** M-RET

    Insert new heading with same level as current. If the cursor is in a plain
    list item,ã€€a new item is created. When this command is used in the middle
    of a line, the line is split and the rest of the line becomes the new
    headline.
    
*** M-S-RET

    Insert new TODO entry with same level as current heading
    
*** TAB (in new,empty entry)

    In a new entry with no text yet, TAB will cycle through reasonable levels
    
*** M-left/right

    Promote/demote current heading by one level
   
*** M-S-left/right

    Promote/demote the current subtree by one level
    
*** M-S-up/down

    Move subtree up/down(swap with previous/next subtree of same level
    
*** C-c C-w

    Refile entry or region to a different location
   
*** C-x n s/w

    Narrow buffer to current subtree / widen it again
   
** Sparse trees

*** C-c /

    This prompts for an extra key to select a sparse-tree creating command.
    
*** C-c / r

    Occur. Prompts for a regexp and shows a sparse tree with all matches. Each
    match is also highlighted; the highlights disappear by pressing ~C-c C-c~.
    
** Plain lists

   Org knows ordered lists, unordered lists, and description lists. Items
   belonging to the same list must have the same indentation on the first line

   * Unordered list items start with '-','+', or '*' as bullets
   * Ordered list items start with '1.' or '1)'
   * Description list use '::' to separate the term from the description
   
   The following commands act on items when the cursor is in the first line of
   an item (the line with the bullet or number)
   
   * TAB
   
   Items can be folded just like heading levels
   
   * M-RET
     
   Insert new item at current level. With a prefix argument, force a new heading 
   
   * M-S-RET
     
   Insert a new item with a checkbox
   
   * M-S-up/down
        
   Move the item including subitems up/down(swap with previous/next item of same
   indentation). If the list is ordered, renumbering is automatic
   
   * M-left/M-right
   
   Decrease/increase the indentation of an item, leaving children alone
  
   * M-S-left/right
    
   Decrease/increase the indentation of the item, including subitems
  
   * C-c C-c

   If there is a checkbox in the item line,toggle the state of the checkbox.
   Also verify bullets and indentation consistency in the whole list
   
   * C-c -
    
   Cycle the entire list level through the different itemize/enumberate
   bullets('-','+','*','1.','1)')

** Footnotes

   A footnote is defined in a paragraph that is started by a foonote marker in
   square brackets in column 0, no indentation allowed. The footnote reference
   is simply the marker in square brackets, inside text.For example:
   
   * [fn:1]
 
   The following commands handle footnotes:
   
   * C-c C-x f

   The footnote action command.When the cursor is on a footnote reference,jump
   to the definition. When it is at a definition, jump to the (first) reference.
   Otherwise, create a new footnote. When this command is called with a prefix
   argument, a menu of additional options including renumbering is offered.
   
   * C-c C-c
     
   Jump between definition and reference.

* Tables   

** About table

   Any line with '|' as the first non-whitespace character is considered part of
   a table. '|' is also the column separator
   
   Any line starting with '|-' is considered as a horizontal separator line and
   will be expanded on the next re-align to span the whole table width
   
   A table is re-aligned automatically each time you press TAB or RET or C-c C-c
   inside the table

** Creation and conversion

*** C-c |

    Convert the active region to table. If every line contains at least one TAB
    character, the function assumes that the material is tab separated. If every
    line contains a comma, comma-separated valus(CSV) are assumed. If not, lines
    are split at whitespace into fields. If there is no active region, this
    command creates an empty Org table.

** Re-aligning and field motion

*** C-c C-c

    Re-align the table without moving the cursor.

*** TAB

    Re-align the table, move to the next field. Creates a new row if necessary.

*** S-TAB

    Re-align, movie to previous field.

*** RET

    Re-align the table and move down to next row. Creates a new row if necessary.

** Column and row editing

*** M-left/M-right

    Move the current column left/right.

*** M-S-left

    Kill the current column.

*** M-S-right

    Insert a new column to the left of the cursor position.

*** M-up/M-down

    Move the current row up/down.

*** M-S-up

    Kill the current row or horizontal line.
      
*** M-S-down

    Insert a new row above the current row. With a prefix argument, the line is
    created below the current one.

*** C-c -

    Insert a horizontal line below current row. With a prefix argument, the line
    is created above the current line.

*** C-c RET

    Insert a horizontal line below current row, and move the cursor into the row
    below that line.

*** C-c ^

    Sort the table lines in the region. The position of point indicates the
    column to be used for sorting and the range of lines is the range between
    the nearest horizontal separator lines, or the entire table.

* Hyperlinks

** Link format

   [[link][description] ] or alternatively [[link] ]
   
   To edit the invisible 'link' part, use ~C-c C-l~ with the cursor on the link.

** Internal links

** External links

   External links are URL-like locators. They start with a short identifying
   string followed by a colon. There can be no space after the colon.

   A link should be enclosed in double brackets and may contain a descriptive
   text to be displayed instead of the URL.
   
   If the description is a file name or URL that points to an image, HTML export
   will inline the image as a clickable button. If there is no description at
   all and the link points to an image, that image will be inlined into the
   exported HTML file.

** Handing links

*** C-c l

    Store a link to the current location. This is a global command (you must
    create the key binding yourself) which can be used in any buffer to create a
    link. The link will be stored for later insertion into an Org buffer.

*** C-c C-l

    Insert a link. This prompts for a link to be inserted into the buffer.You
    can just type a link, or use history keys up and down to access stored
    links.You will be prompted for the description part of the link. When called
    with a C-u prefix argument, file name completion is used to link to a file.

*** C-c C-l(with cursor on an exiting link)

    When the cursor is on an exiting link. C-c C-l allows you to edit the link
    and description parts of the link.

*** C-c C-o or mouse-1 or mouse-2

    Open link at point.

*** C-c &

    Jump back to a recorded position. A position is recorded by the commands
    following internal links, and by C-c %. Using this command several times in
    direct succession moves through a ring of previously recorded positions.
 
** Targeted links

   File links can contain addittional information to make Emacs jump to a
   particular location in the file when following a link. This can be a line
   number or a search option after a double colon.

* TODO Items

** Using TODO states

   Any headline becomes a TODO item when it starts with the word 'TODO'.

*** C-c C-t

    Rotate the TODO state of the current item among (unmarked) -> TODO ->DONE ->
    (unmarked). The same rotation can also be done "remotely" from the agenda
    buffers with the t command key.

*** S-right/left

    Select the following/preceding TODO state,similar to cycling.

*** C-c / t

    View TODO items in a sparse tree. Folds the buffer, but shows all TODO items
    and the headings hierarchy above them.
   
*** C-c a t

    Show the global TODO list. Collects the TODO items from all agenda files
    into a single buffer.

*** S-M-RET

    Insert a new TODO entry below the current one.

*** Changing a TODO state can also trigger tag changes

** Multi-state workflows

** Progress logging

** Priorities

   Org mode support three priorities:'A','B',and'C', 'A' is the highest, 'B' the
   default if none is given. Priorities make a difference only in the agenda.

*** C-c ,

    Set the priority of the current headline. Press 'A','B'or'C'to select a
    priority, or SPC to remove the cookie.

*** S-up/dwn

    Increase/decrease priority of current headline.

** Breaking tasks down into subtasks

   To keep the overview over the fraction of subtasks that are already
   completed, insert either'[/]'or'[%]'anywhere in the headline. These cookies
   will be updated each time the TODO status of a child changes, or when
   pressing C-c C-c on the cookie.

** Checkboxes

   Every item in a plain list can be made into a checkbox by starting it with
   the string '[ ]'.

*** C-c C-c

    Toggle checkbox status or (with prefix arg) checkbox presence at pointa.

*** M-S-RET

    Insert a new item with a checkbox. This works only if the cursor is already
    in a plain list item.

* Tags

  Tags are normal words containing letters, numbers, '_', and '@' at the end of
  the headline.

  Tags must be preceded and followed by a single colon and several tags can be
  specified.
 
  Tags will by default be in bold face with the same color as the headline.

** Tag inheritance

   If a headling has a certain tag, all subheading will inherit the tag as well.

   You can also set tags that all entries in a file should inherit. Use a line
   like this: #+FILETAGS: :Peter:Boss:Secret:

** Setting tags

   After a colon, M-TAB offers completion on tags.

*** C-c C-q

    Enter new tags for the current headline. Org mode will either offer
    completion or a special single-key interface for setting tags. After
    pressing RET, the tags will be inserted and aligned to to org-tags-column.
    When called with a C-u prefix, all tags in the current buffer will be
    aligned to that column, just to make things look nice.

*** C-c C-c

    When the cursor is in a headline, this does the same as C-c C-q.
   
** Tag groups

   You can set group tags by inserting a colon between the group tag and other
   tags.

   If you want to ignore group tags temporarily, toggle group tags support with
   org-toggle-tags-groups, bound to C-c C-x q. If you want to disable tag groups
   completely, set org-group-tags to nil.

** Tag searches

   Once a system of tags has been set up, it can be used to collect related
   information into special lists.

*** C-c \

*** C-c / m

    Create a sparse tree with all headlines matching a tags search. With a C-u
    prefix argument, ignore headlines that are not a TODO line.

*** C-c a m

    Create a global list of tag matches from all agenda files.
   
*** C-c a M

    Create a global list of tag matches from all agenda files, but check only
    TODO items and force checking subitems.

* Properties

  Properties are key-value pairs associated with an entry. They live in a
  special drawer with the name PROPERTIES. Each property is specified on a
  single line, with the key(surrounded by colons)first, and the value after
  it.

  globally using org-global-properties, or file-wide like this:#+PROPERTY:
  NDisks_ALL  1 2 3 4.
 
*** C-c C-x p

    Set a property. This prompts for a property name and a value.

*** C-c C-c d

    Remove a property from the current entry.
    
* Dates and Times

** Timestamps

   A timestamp is a specification of a date (possibly with a time or a range of
   times) in a special format.

*** Plain timestamp; Event; Appointment

    A simple timestamp just assigns a data/time to an item. This is just like
    writing down an appointment or event in a paper agenda.

**** Learn Org-mode
     <2019-01-24 Thur 23:00>

**** Lear Emacs
     <2019-01-24 Thur 23:00-24:00>

*** Timestamp with repeater interval

    A timestamp may contain a repeater interval, indicating that it applies
    not only on the given data, but again and again after a certain interval
    of N days(d), weeks(w), months(m), or years(y).
    
    The following will show up in the agenda every Wednesday:

**** Review
     <2019-01-23 Wed 21:00 +1w>

*** Diary-style sexp entries

    For more complex date specifications, Org mode supports using the special
    sexp diary entries implemented in the Emacs calendar/diary package. For
    example:

**** The nerd meeting on every 2nd Thursday of the month
     <%%(diary-float t 4 2)>

*** Time/Date range

    Two timestamps connected by '--' denote a range.

**** Learn spacevim and spacemacs
     <2019-01-25 Fri 20:00>--<2019-01-25 Fri 21:00>

*** Inactive timestamp

    Just like a plain timestamp, but with square brackets instead of angular
    ones. These timestamps are inactive in the sense that they do not trigger
    an entry to show up in the agenda.

**** Go to school
     [2019-03-01 Fri]

** Creating timestamps 

   All commands listed below produce timestamps in the correct format.

*** C-c .

    Prompt for a date and insert a corresponding timestamp. When the cursor is
    at an exiting timestamp in the buffer, the command is used to modify this
    timestamp instead of inserting a new one. When this command is used twice
    in succession, a time range is inserted. With a prefix, also add the current
    time.

*** C-c !

    Like C-c ., but insert an inactive timestamp that will not cause an agenda
    entry.

*** S-left/right

    Change date at cursor by one day.

*** S-up/down

    Change the item under the cursor in s timestamp. The cursor can be on a
    year, month, day, hour, minute.When the timestamp contains a time range
    like '15:30-16:30',modifying the first time will also shift the second,
    shifting the time block with constant length. To change the length, modify
    the second time.

** Deadlines and scheduling

*** DEADLINE

    Meaning: the task (most likely a TODO item. though not necessarily) is
    supposed to be finished on that date.

**** C-c c-d

     Insert 'DEADLINE'keyword along with a stamp,in the line following the
     headline.

*** SCHEDULED

    Meaning:you are planning to start working on that task on the given date.

**** C-c C-s

     Insert 'SCHEDULED' keyword along with a stamp, in the line following the
     headline.

** Clocking work time

   Org mode allows you to clock the time you spend on specific tasks in a
   project.

*** C-c C-x C-i

    Start the clock on the current item (clock-in). This inserts the CLOCK
    keyword together with a timestamp. When called with a C-u prefix argument,
    select the task from a list of recently clocked tasks.

*** C-c C-x C-o

    Stop the clock (clock-out). This inserts another timestamp at the same
    location where the clock was last started. It also directly computes the
    resulting time in inserts it after the time range as '=> HH:MM'.

*** C-c C-x C-e

    Update the effort estimate for the current clock task.

*** C-c C-x C-q

    Cancel the current clock. This is useful if a clock was started by mistake,
    or if you ended up working on something else.

*** C-c C-x C-j

    Jump to the entry that contains the currently running clock. With a C-u
    prefix arg, select the target task from a list of recently clocked tasks.

*** C-c C-x C-r

    Insert a dynamic block containing a clock report as an Org-mode table into
    the current file. When the cursor is at an exiting clock table, just update
    it.

*** C-c C-c

    Update dynamic block at point. The cursor needs to be in the #+BEGIN line
    of the dynamic block.

*** the l key 

    Used in the agenda to show which tasks have been worked on or closed during
    a day.

* Capture - Refile - Archive

** Capture

*** Setting up a capture location 

*** Using capture

**** C-c c

     Start a capture process, placing you into a narrowed indirect buffer to
     edit.

**** C-c C-c

     Once you are done entering information into the capture buffer, C-c C-c will
     return you to the window configuration before the capture process, so that
     you can resume your work without further distraction.

**** C-c C-w

     Finalize by moving the entry to a refile location.

**** C-c C-k

     Abort the capture process and return to the previous state.

*** Capture templates

**** %a

     annotation, normally the link created with org-store-link.

**** %i

     initial content, the region when capture is called with C-u.

**** %t, %T

     timestamp, date only, or date and time.

**** %u, %U

     like above, but inactive timestamp.

** Refile and copy

*** C-c M-x 

    Copy the entry or region at point. This command behaves like org-refile,
    except that the original note will not be deleted.

*** C-c C-w

    Refile the entry or region at point. This command offers possible locations
    for refiling the entry and lets you select one with completion. The item (or
    all items in the region) is filed below the target heading as a subitem. By
    default all level 1 headlines in the curent buffer are considered to be
    targets, but you can have more complex definitions across a number of files.
    See the variable org-refile-targets for details.

*** C-u C-c C-w 

    Use the refile interface to jump to a heading.

*** C-u C-u C-c C-w

    Jump to the location where org-refile last moved a tree to.

** Archiving

*** C-c C-x C-a

    Archive the current entry using org-archive-default-command.

*** C-c C-x C-s or short C-c $

    Archive the subtree starting at the cursor position to the location given by
    org-archive-location.

*** The default archive location is 

    A file in the same directory as the current file, with the name derived by
    appending _archive to the current file name.

* Agenda Views

** Agenda files

   The information to be shown is normally collected from all agenda files, the
   files listed in the variable org-agenda-files.

*** C-c [

    Add current file to the list of agenda files. The file is added to the front
    of the list. If it was already in the list, it is moved to the front. With a
    prefix argument, file is added/moved to the end.

*** C-c ]

    Remove current file from the list of agenda files.

*** C-,

    Cycle through agenda file list. visiting one file after the other.

** The agenda dispatcher

   The views are created through a dispatcher, which should be bound to a global
   key-for example C-c a. After pressing C-c a, an additional letter is required
   to execute a command.

*** a

    The calendar-like agenda.

*** t/T

    A list of all TODO items.

*** m/M

    A list of headlines matching a TAGS expression.

*** s

    A list of entries selected by a boolean expression of keywords and/or regular
    expressions that must or must not occur in the entry.

** The built-in agenda views

*** The weekly/daily agenda

    The purpose of the weekly/daily agenda is to act like a page of a paper
    agenda, showing all the tasks for the current week or day.

**** C-c a a

     Compile an agenda for the current week from a list of Org files. The agenda
     shows the entries for each day.

**** To add all the appointments of your agenda files

     Use the command org-agenda-to-appt.

*** The global TODO list

    The global TODO list contains all unfinished TODO items formatted and
    collected into a single place. Remote editing of TODO items lets you
    can change the state of a TODO entry with a single key press.

**** C-c a t

     Show the global TODO list. This collects the TODO items from all agenda
     files into a single buffer.

**** C-c a T

     Like the above, but allows selection of a specific TODO keyword.

*** Matching tags and properties

    If headlines in the agenda files are marked with tags, or have preperties.
    you can select headlines based on this metadata and collect them into an
    agenda buffer. The match syntax described here also applies when creating
    sparse trees with C-c / m.

**** C-c a m

     Produce a list of all headlines that match a given set of tags. The command
     prompts for a selection criterion, which is a boolean logic expression with
     tags, like '+work+urgent-withboss' or 'work|home'. If you often need a
     specific search, define a custom command for it.

**** C-c a M

     Like C-c a m, but only select headlines that are also TODO items.

**** Match syntax

     A search string can use Boolean operators'&'for AND and '|'for OR. '&'binds
     more strongly than '|'. Parentheses are currently not implemented. Each
     element in the search is either a tag, a regular expression matching tags,
     or an expression like PROPERTY OPERATOR VALUE with a comparison operator,
     accessing a property value. Each element may be preceded by '-', to select
     against it, and '+' is syntactic sugar for positive selection. The AND
     operator '&' is optional when + or '-' is present.

*** Search view

    This agenda view is a general text search facility for Org mode entries. It
    is particularly useful to find notes.

**** C-c a s

     This is a special search that lets you select entries by matching a substring
     or specific words using a boolean logic.

     Note that in addition to the agenda files, this command will also search the
     files listed in org-agenda-text-search-extra-files.

** Commands in the agenda buffer

   Entries in the agenda buffer are linked back to the Org file or diary file
   where they originate. Commands are provided to show and jump to the original
   entry location, and to edit the Org files "remotely" from the agenda buffer.

*** Motion

**** n

     Next line(same as up and C-p).

**** p

     Previous line(same as down and C-n).

*** View/Go to Org file

**** mouse-3

**** SPC

     Display the original location of the item in another window. With prefix arg,
     make sure that the entire entry is made visible in the outline, not only the
     heading.

**** TAB

     Go to the original location of the item in another window. Under Emacs 22,
     mouse-1 will also work for this.

**** RET

     Go to the original location of the item and delete other windows.

*** Change display

**** o

     Delete other windows.

**** d/w

     Switch to day/week view.

**** f and b

     Go forward/backward in time to display the following
     org-agenda-current-span days. For example, if the display
     covers a week, switch to the following/previous week.

**** .

     Go to today.

**** j

     Prompt for a date and go there.

**** v l or short l

     Toggle Logbook mode. In Logbook mode, entries that were marked DONE while
     logging was on (variable org-log-done) are shown in the agenda, as are
     entries that have been clocked on that day. When called with a C-u prefix,
     show all possible logbook entries, including state changes.

**** r or g

     Recreate the agenda buffer, to reflect the changes.

**** s

     Save all Org buffers in the current Emacs session, and also the locations
     of IDs.

*** Secondary filtering and query editing

**** /

     Filter the current agenda view with respect to a tag. You are prompted for
     a letter to select a tag. Press '-' first to select against the tag.

**** \

     Narrow the current agenda filter by an additional condition.

*** Remote editing

**** 0--9

     Digit argument.

**** t

     Change the TODO state of the item, in the agenda and in the org file.

**** C-k

     Delete the current agenda item along with the entire subtree bolonging to
     it in the original Org file.

**** C-c C-w

     Refile the entry at point.

**** C-c C-x C-a or short a

     Archive the subtree corresponding to the entry at point using the default
     archiving command set in org-archive-default-command.

**** C-c C-x C-s or short $

     Archive the subtree corresponding to the current headline.

**** C-c C-s
     
     Schedule this item, with prefix arg remove the scheduling timestamp.

**** C-c C-d

     Set a deadline for this item, with prefix arg remove the deadline.

**** S-right and S-left

     Change the timestamp associated with the curent line by one day.

**** I

     Start the clock on the current item.

**** O/X

     Stop/cancel the previously started clock.

**** J

     jump to the running clock in another window.

** Custom agenda views

* Markup for rich export

** Structural markup elements

*** Document title

    The title of the exported document is taken from the special line.

**** #+TITLE: This is the title of the document

*** Headings and sections

    Only the first three outline levels will be used as headings. Deeper
    levels will become itemized lists. You can change the location of this
    switch globally by setting the variable org-export-headline-levels, or
    on a per-file basis with a line.

**** #+OPTIONS: H:4

*** Table of contents

    The table of contents is normally inserted directly before the first
    headline of the file.

**** #+OPTIONS: toc:2    (only to two levels in TOC)	

**** #+OPTIONS: toc:nil    (no TOC at all)

*** Paragraphs, line breaks, and quoting

    Paragraphs are separated by at least one empty line. If you need to
    enforce a line break within a paragraph, use '\\' at the end of a line.

    To keep the line breaks in a region, but otherwise use normal formatting,
    you can use this construct, which can also be used to format poetry.

    #+begin_verse
    Create clouds overhead
    Tiny black birds rise and fall
    Snow covers Emacs
    -- AlexSchroeder
    #+end_verse

    When quoting a passage from another document, it is customary to format
    this as a paragraph that is indented on both the left and the right margin.
    You can include quotations in Org-mode documents like this:

    #+begin_quote
    Everything should be made as simple as possible,
    but not any simpler -- Albert Einstein
    #+end_quote

    If you would like to center some text, do it like this:

    #+begin_center
    Everything should be made as simple as possible, \\
    but not any simpler
    #+end_center

*** Emphasis and monospace

    You can make words *bold*, /italic/, _underlined_, =verbatim= and ~code~,
    and, if you must, '+strike-through+'. Text in the code and verbatim string
    is not processed for Org-mode specific syntax, it is exported verbatim.
    To insert a horizontal rules, use a line consisting of only dashes, and at
    least 5 of them.

*** Comment lines 

    Lines starting with zero or more whitespace characters followed by '#' and
    a whitespace are treated as comments and, as such, are not exported.

    Likewise, regions surrounded by '#+BEGIN_COMMENT'...'#+END_COMMENT' are not
    exported.

    Finally, a 'COMMENT' keyword at the beginning of an entry, but after any
    other keyword or priority cookie, comments out the entire subtree.

**** C-c ;

     Toggle the COMMENT keyword at the beginning of an entry.

** Images and Tables

   For Org mode tables, the lines before the first horizontal separator line
   will become table header lines. You can use the following lines somewhere
   before the table to assign a caption and a label for cross references, and
   in the text you can refer to the object with[[tab:basic-data] ]:

   #+CAPTION: This is the caption for the next table (or link)
   #+NAME: tal:basic-data
   | ... | ... |
   |-----|-----|

   If a link to an image files does not have a description part, for example
   [[./img/a.jpg]]. If you wish to define a caption for the image and maybe a
   label for internal cross references, you sure that the link is on a line
   by itself precede it with:

   #+CAPTION: This is the caption for the next figure link (or table)
   #+NAME: fig:SED-HR4049
   [[./img/a.jpg]]

** Literal examples

   You can include literal examples that should not be subjected to markup. Such
   examples will be typeset in monospace, so this is well suited for source code
   and similar examples.

   #+begin_example
   Some example from a text file.
   #+end_example

   For simplicity when using small examples, you can also start the example lines
   with a colon followed by a space. There may also be additional whitespace
   before the colon:

   Here is an example

   : Some example from a text file.

   For source code from a programming language. or any other text that can be
   marked up by font-lock in Emacs, you can ask for it to look like the
   fontified Emacs buffer:

     #+BEGIN_SRC emacs-lisp
       (defun org-xor (a b)
       "Exclusive or."
       (if a (not b) b))
     #+END_SRC
     
     To edit the example in a special buffer supporting this language, use C-c '
     to both enter and leave the editing buffer.

** Include files

   During export, you can include the content of another file.

   For example, to include your .emacs file, you could use:

   #+INCLUDE: "~/.emacs" src emacs-lisp

   The optional second and third parameter are the markup, and, if the markup is
   'src', the language for formatting the contents. The markup is optional, if
   it is not given, the text will be assumed to be in Org mode format and will
   be processed normally. File-links will be interpreted as well:

   #+INCLUDE: "./otherfile.org::#my_custom_id" :only-contents t

   C-c ' will visit the included file.

** Embedded LATEX

   With special setup, LATEX snippets will be included as images when exporting
   to HTML.

* Exporting

** Export options

   The exporter recognizes special lines in the buffer which provide additional
   information. These lines may be put anywhere in the file. The whole set of
   lines can be inserted into the buffer with ~C-c C-e #~.

*** C-c C-e #

    Insert template with export options,see example below.

** The export dispatcher

   All export commands can be reached using the export dispatcher, which is a
   prefix key that prompts for an additional key specifying the command. Normally
   the entire file is exported, but if a region is active, it will be exported
   instead.

*** C-c C-e

    Dispatcher for export and publishing commands.

** ASCII/Latin-1/UTF-8 export

   ASCII export produces a simple and very readable version of an Org-mode file,
   containing only plain ASCII. Latin-1 and UTF-8 export augment the file with
   special characters and symbols available in these encodings.

*** C-c C-e t a and C-c C-e t A

    Export as ASCII file or temporary buffer.

*** C-c C-e t n and C-c C-e t N

    Like the above commands, but use Latin-1 encoding.

*** C-c C-e t u and C-c C-e t U

    Like the above commands, but use UTF-8 encoding.

** HTML export

*** C-c C-e h h

    Export as HTML file myfile.html.

*** C-c C-e h o

    Export as HTML file and immediately open it with a browser.

    /To insert HTML that should be copied verbatim to the exported file use either/

    #+HTML: Literal HTML code for export

    /or/

    #+BEGIN_EXPORT html
    All lines between these markers are exported literally
    #+END_HTML

** LATEX and PDF export

*** C-c C-e l l

    Export as LATEX file myfile.tex.

*** C-c C-e l p

    Export as LATEX and then process to PDF.

*** C-c C-e l o

    Export as LATEX and then process to PDF, then open the resulting PDF file.

** iCalendar export

*** C-c C-e c f

    Create iCalendar entries for the current file in a .ics file.

*** C-c C-e c c

    Create a single large iCalendar file from all files in org-agenda-files and
    write it to the file given by org-icalendar-combined-agenda-file.

* Publishing

** C-c C-e P x

   Prompt for a specific project and publish all files that belong to it.

** C-c C-e P p

   Publish the project containing the current file.

** C-c C-e P f

   Publish only the current file.

** C-c C-e P a

   Publish every project.

* Working with source code

** Structure of Code Blocks

   The structure of code blocks is as follows:

     #+NAME: <name>
     #+BEGIN_SRC <language> <switches> <header arguments>
     	<body>
     #+END_SRC

     <name> is a string used to name the code block.

     <language> specifies the language of the code block.

     <switches> can be used to control export of the code block.

     <header arguments> can be used to control many aspects of code block
     behavior.

     as demonstrated below
     <body> contains the actual source code

** Insert source code 

*** C-c C-,

    Runs the command org-insert-structure-template.

** Editing source code

   Use ~C-c '~ to edit the current code block. This brings up a language
   major-mode edit buffer containing the body of the code block. Saving
   this buffer will write the new contents back to the Org buffer. Use
   C-c ' again to exit the edit buffer.
     
** Evaluating code blocks

   Use C-c C-c to evaluate the current code block and insert its results in the
   Org-mode buffer. By default, evaluation is only turned on for emacs-lisp code
   blocks.

** Extracting source code

   Use C-c C-v t to create pure source code files by extracting code from source
   blocks in the current buffer.

** Library of Babel

   Use C-c C-v l to load the code blocks from an Org-mode files into the
   "Library of Babel", these blocks can then be evaluated from any Org-mode
   buffer.

** Header Arguments

* Miscellaneous

** Completion

   Org supports in-buffer completion with M-TAB. This type of completion does not make
   use of the minibuffer. You simply type a few letters into the buffer and use the key
   to complete text right there.
