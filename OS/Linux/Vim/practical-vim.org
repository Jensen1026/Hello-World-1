* Vim解决问题的方式

** 认识 . 命令

*** .

    重复上次的修改。

*** x

    删除光标下的字符, 但不进入插入模式。

*** dd

    删除整行。

*** 重复一次修改

    从进入插入模式的那一刻起, 直到返回普通模式时为止, Vim会记录每一个按键操作。
    做出这样一个修改后再用 ~.~ 命令的话, 它将会重新执行所有这些按键操作。

** 不要自我重复

*** ^

    行首。

*** a

    在当前光标之后添加内容。

*** A

    在当前行的结尾添加内容。

*** c

    修改。

*** C

    c$, 修改至行末。

*** s

    cl, 删除字符并插入。

*** S

    ^C, 删除行并插入。

*** 一个模式

    一键移动, 另一键操作。

** 以退为进

*** f{char}

    让Vim查找下一处指定字符{char}出现的位置, 如果找到了, 就直接把光标移到那里。

*** ;

    重复查找上次f命令所查找的字符。

*** ,

    反向查找上次f命令所查找的字符。

** 执行, 重复, 回退

*** 可重复的操作及如何回退

| 目的                     | 操作                  | 重复 | 回退 |
|--------------------------+-----------------------+------+------|
| 做出一个修改             | {edit}                | .    | u    |
| 在行内查找下一指定字符   | f{char}/t{char}       | ;    | ,    |
| 在行内查找上一指定字符   | F{char}/T{char}       | ;    | ,    |
| 在文档中查找下一处匹配项 | /pattern<CR>          | n    | N    |
| 在文档中查找上一处匹配项 | ?pattern<CR>          | n    | N    |
| 执行替换                 | :s/target/replacement | &    | u    |
| 执行一系列修改           | qx{changes}q          | @x   | u    |

** 查找并手动替换

*** *

    查找当前光标下的单词。

*** cw

    删除从光标位置到单词结尾间的字符, 并进入插入模式。

** 认识 . 范式

*** 理想模式: 用一键移动, 另一键执行

* 普通模式

** 停顿时请移开画笔

** 把撤销单元切成块

*** u

    撤销最新的修改。

*** 一次修改

    一次修改可以是改变文档内文本的任意操作, 其中包括在普通模式, 可视模式以及命令
    行模式中所触发的命令, 而且一次修改也包括了在插入模式中输入 (或删除) 的文本。

    从进入插入模式开始, 直到返回普通模式为止, 在此期间输入或删除的任何内容都被当
    成一次修改。

*** 让每个 "可撤销块" 对应一次思考过程

    不管停顿的时间有多短, 每次停顿都是一个自然的中断点, 提示我们该退出插入模式了。
    当准备好继续写时, 按 A 命令就可以回到原来的地方继续写作。

** 构造可重复的修改

*** b

    把光标移到单词的开头。

*** db

    删除从光标起始位置到单词开头的内容。

*** daw

    delete a word, 其中 aw 为文本对象 (text object)。

** 用次数做简单的算术运算

*** <C-a>

    对数字执行加操作, 如果光标不在数字上, 那么将在当前行正向查找一个数字, 如果找
    到了, 它就径直跳到那里。在不带次数执行时, 它会逐个加, 但如果带一个次数前缀,
    那么可以用它加上任意整数。

*** <C-x>

    对数字执行减操作。

** 能够重复, 就别用次数

** 双剑合璧, 天下无敌

*** 操作符 + 动作命令 = 操作

*** dap

    delete a paragraph, 其中 ap 为文本对象 (text object)。

*** Vim 的语法只有一条额外规则

    即当一个操作符命令被连续调用两次时, 它会作用于当前行。

*** Vim 的操作符命令

**** c

     修改。

**** d

     删除。

**** y

     复制到寄存器。

**** g~

     反转大小写。

**** gu

     转换为小写。

**** gU

     转换为大写。

**** >

     增加缩进。

**** <

     减小缩进。

**** =

     自动缩进。

**** !

     使用外部程序过滤{motion}所跨越的行。

*** 操作符待决模式

    只有操作符才会激活操作符待决模式。

* 插入模式

** 在插入模式中可即时更正错误

*** <C-h>

    删除前一个字符 (同退格键)。

*** <C-w>

    删除前一个单词。

*** <C-u>

    删至行首。

** 返回普通模式

*** <Esc>

    切换到普通模式。

*** <C-[>

    切换到普通模式。

*** <C-o>

    切换到插入-普通模式。

*** 插入-普通模式

    插入-普通模式是普通模式的一个特例, 它能让我们执行一次普通模式命令。在此模式
    中, 可以执行一个普通模式命令, 执行完后, 马上又返回到插入模式。

*** zz

    重绘屏幕, 并把当前行显示在窗口正中. 在编辑时键入 <C-o>zz 可以重绘屏幕并且可
    以不受中断地继续编辑。

** 不离开插入模式, 粘贴寄存器中的文本

*** K

    查看处于光标之下的那个单词的手册页。

*** J

    把当前行和下一行连接在一起。

*** <C-r>{register}

    在插入模式中粘贴, 其中 {register} 是想要插入的寄存器的名字。

*** <C-r><C-p>{register}

    按原义插入寄存器内的文本, 并修正任何不必要的缩进。

** 随时随地做运算

*** <C-r>=

    在插入模式中访问表达式寄存器, 这条命令会在屏幕下方显示一个提示符, 可以在其后
    输入要执行的表达式. 输入表达式后敲一下 <CR>, Vim 就会把执行的结果插入文档的
    当前位置了。

** 用字符编码插入非常用字符

*** <C-v>{code}

    在插入模式中根据字符编码插入字符, Vim 接受的字符编码共包含3位数字(十进制).
    如果 <C-v> 命令后面跟一个非数字键, 它会插入这个按键本身代表的字符。

*** <C-v>u{code}

    在插入模式中插入4位十六进制编码的字符。

*** ga

    在屏幕下方分别以十进制和十六进制的形式显示当前光标下的字符的编码。

*** <C-k>{char1}{char2}

    插入以二合字母{char1}{char2}表示的字符。

*** 二合字母

    :digraphs 或 :h digraph-table。

** 用替换模式替换已有文本

*** R

    由普通模式进入替换模式。

*** <Insert>

    在插入模式和替换模式间切换。

*** gR

    进入虚拟替换模式 (virtual replace mode), 它会把制表符当成一组空格进行处理。

*** r{char}

    单次版本的替换模式, 允许覆盖一个字符, 之后马上又回到普通模式。

*** gr{char}

    单次版本的虚拟替换模式, 允许覆盖一个字符, 之后马上又回到普通模式。

* 可视模式

** 深入理解可视模式

*** 选择模式 (:h Select-mode)

    在此模式下, 输入的可见字符会使选中的文本被删除, 同时 Vim 会进入插入模式, 并
    插入这个可见字符。

*** <C-g>

    在可视模式和选择模式间切换。

** 选择高亮选区

*** v

    激活面向字符的可视模式。

*** V

    激活面向行的可视模式。

*** <C-v>

    激活面向列块的可视模视。

*** gv

    重选上次的高亮选区。

*** o

    切换高亮选区的活动端。

** 重复执行面向行的可视命令

* 缓冲区

  文件是存储在磁盘上的, 而缓冲区存在于内存中. 当Vim打开一个文件时, 该文件的内容
  被读入一个具有相同名字的缓冲区。

** :ls

   列出所有被载入内存中的缓冲区的列表。

   ~%~ 符号指明哪个缓冲区在当前窗口中可见。
   ~#~ 符号则代表轮换文件,按<C-^>可在当前文件和轮换文件间切换。
   ~+~ 符号表示缓冲区被修改过了。

** :bprev

   切换到缓冲区列表中的上一个缓冲区。

** :bnext

   切换到缓冲区列表中的下一个缓冲区。

** :bfirst

   切换到缓冲区列表中的第一个缓冲区。

** :blast

   切换到缓冲区列表中的最后一个缓冲区。

** :buffer {bufnumber}

   直接凭编号跳转到一个缓冲区。

** :buffer {bufname}

   直接凭文件路径中能唯一标识缓冲区的字符跳转到一个缓冲区。

** :bufdo

   允许在:ls列出的所有缓冲区上执行Ex命令。

** :bd[elete] {bufnumber}

   删除指定编号的缓冲区。

** 管理隐藏缓冲区

   a 表示活动缓冲区(active)。

   h 表示隐藏缓冲区(hidden)。

*** 在退出时, 处理隐藏缓冲区的方式

**** :w[rite]

     把缓冲区内容写入磁盘。

**** :e[dit]!

     把磁盘文件内容读入缓冲区(即回滚所做修改)。

**** :qa[ll]!

     关闭所有窗口, 摒弃修改而无需警告。

**** :wa[ll]!

     把所有改变的缓冲区写入磁盘。

* 参数列表

** :args

   显示当前参数列表的内容，参数列表记录了在启动时作为参数传递给Vim的文件列表，
   "[]"字符则指明了参数列表中的哪个文件是活动文件。

** 用:argdo命令可以在参数列表中的每个文件上执行一条Ex命令.

** :prev

   切换到参数列表中的上一个文件。

** :next

   切换到参数列表中的下一个文件。

** 填充参数列表

   当不带参数运行:args命令时, 它会打印当前参数列表的内容。

**** :args {arglist}

     设置参数列表的内容; {arglist}可以包括文件名, 通配符, 甚至是一条shell命令的
     输出结果。

**** 用文件名指定文件

     填充参数列表最简单的方式是逐一指定文件的名字。

**** 用Glob模式指定文件

     ~*~ 符号用于匹配0个或多个字符, 但它的范围仅局限于指定的目录, 而不会递归其子
     目录。

     ~**~ 通配符也匹配0个或多个字符, 但它可以递归进入指定目录的子目录。

     {arglist}可以使用多个glob模式。

*** 用反引号结构指定文件

    Vim会在shell中执行反撇号(`)括起来的命令。

* 窗口(:h window)

  在Vim术语中, 窗口是缓冲区的显示区域。

** 创建分割窗口

*** <C-w>s

    水平切分当前窗口，新窗口仍显示当前缓冲区。

*** <C-w>v

    垂直切分当前窗口，新窗口仍显示当前缓冲区。

*** :sp[lit] {file}

    水平切分当前窗口，并在新窗口中载入{file}。

*** :vsp[lit] {file}

    垂直切分当前窗口，并在新窗口中载入{file}。

** 在窗口间切换

*** <C-w>w

    在窗口间循环切换。

*** <C-w>h

    切换到左边的窗口。

*** <C-w>j

    切换到下边的窗口。

*** <C-w>k

    切换到上边的窗口。

*** <C-w>l

    切换到右边的窗口。

** 关闭窗口

*** <C-w>c

    :clo[se], 关闭活动窗口。

*** <C-w>o

    :on[ly], 只保留活动窗口，关闭其他所有窗口。

** 改变窗口大小及重新排列窗口

*** <C-w>=

    使所有窗口等宽、等高。

*** <C-w>_

    最大化活动窗口的高度。

*** <C-w>|

    最大化活动窗口的宽度。

*** [N]<C-w>_

    把活动窗口的高度设为[N]行。

*** [N]<C-w>|

    把活动窗口的宽度设为[N]列。

* 标签页(:h tabpage)

  在Vim中, 标签页是可以容纳一系列窗口的容器。

  在Vim中, 当用:edit命令打开一个文件时, Vim却不会自动创建一个新标签页, 而是创建
  一个新缓冲区, 并把该缓冲区显示到当前窗口。

** :lcd {path}

   设置当前窗口的本地工作目录，只影响当前窗口，而非当前标签页。

** :windo lcd {path}

   设置同一个标签页下的所有窗口的本地工作目录。

** :tabe[dit] {filename}

   在新标签页中打开{filename}，如果省略{filename}，则载入一个空缓冲区。

** <C-w>T

   把当前窗口移至一个新标签页，注意大写T。

** :tabc[lose]

   关闭当前标签页及其中的所有窗口。

** tabo[nly]

   只保留活动标签页，关闭所有其他标签页。

** {N}gt

   切换到编号为{N}的标签页。

** gt

   切换到下一标签页。

** gT

   切换到上一标签页。

** tabm[ove] [N]

   将当前标签页移至编号为[N]处，若[N]为0,则当前标签页会被移至开头； 若省略[N]，
   则会被移至结尾。

* 跳转列表(:h jumplist)

** :jumps

   查看跳转列表的内容。

** <C-o>

   后退。

** <C-i>

   前进。

** %

   跳转到匹配的括号所在之处。

** (/)

   跳转到上一句/下一句的开头。

** {/}

   跳转到上一段/下一段的开头。

** H/M/L

   跳转到屏幕最上方/正中间/最下方。

** gf

   跳转到光标下的文件名，需设置suffixesadd和path选项。

** <C-]>

   跳转到光标下关键字的定义之处，需配置。

** '{mark}/`{mark}

   跳转到一个位置标记。

* 改变列表(:h changelist)

** :changes

   查看改变列表的内容。

** g;

   反向遍历改变列表。

** g,

   正向遍历改变列表。

** ``

   当前文件中上次跳转动作之前的位置。

** `.

   上次修改的位置。

** `^

   上次退出插入模式时光标所在的位置。

** `[

   上次修改或复制的起始位置。

** `]

   上次修改或复制的结束位置。

** `<

   上次高亮选区的起始位置。

** `>

   上次高亮选区的结束位置。

** gi

   恢复上次退出插入模式时光标所在的位置，并切换到插入模式。

* Quickfix列表(:h quickfix)

** :cnext

   跳转到下一项。

** :cprev

   跳转到上一项。

** :cfirst

   跳转到第一项。

** :clast

   跳转到最后一项。

** :cnfile

   跳转到下一个文件中的第一项。

** :cpfile

   跳转到上一个文件中的最后一项。

** :cc N

   跳转到第n项。

** :copen

   打开quickfix窗口。

** :cclose

   关闭quickfix窗口。

** cdo {cmd}

   在quickfix列表中的每一行上执行{cmd}。

** :cfdo {cmd}

   在quickfix列表中的每个文件上执行一次{cmd}。

** :colder

   回溯quickfix列表之前的某个版本(Vim会保存最近的10个列表)。
** :cnewer

   从旧的quickfix列表回到比较新的列表。

* 零碎搜集（待整理）

  "|"英文名叫bar，是vim普通模式下用于跳转到当前行某一列的一个命令，"|"表示当前行
  的行首。跳转到任意列：0nl或n|。

** C-f

   屏幕向下移动一页, 相当于 [Page Down] 按键。

** c-b

   屏幕向上移动一页, 相当于 [Page Up] 按键。

** C-d

   屏幕向下移动半页。

** C-u

   屏幕向上移动半页。
